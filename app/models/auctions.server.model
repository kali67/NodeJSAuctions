const databaseHelper = require('../models/database.server.model');
const user = require('../models/users.server.model');
const globals = require('../utilities/GlobalObjects');


exports.viewAuction = function(data){
    let sql = "select auction.auction_id as id, category.category_title as categoryTitle," +
        "auction.auction_categoryid as categoryId, auction.auction_title as title," +
        "auction.auction_reserveprice as reservePrice, auction.auction_startingdate as startDateTime," +
        "auction.auction_endingdate as endDateTime, ifnull(MAX(bid.bid_amount),0) as currentBid from auction " +
        "JOIN category ON auction.auction_categoryid = category.category_id " +
        "LEFT JOIN bid ON bid.bid_auctionid = auction.auction_id ";

    let end = " group by auction.auction_id order by auction.auction_startingdate DESC";
    let values= [];
    let conditions = "";
    if (data.query['category-id']) {
        values.push(data.query['category-id']);
        conditions += " AND auction.auction_categoryid = ?";
    }
    if (data.query.seller){
        values.push(data.query.seller);
        conditions += " AND auction.auction_userid = ?";
    }
    if (data.query.bidder){
        values.push(data.query.bidder);
        conditions += " AND bid.bid_userid = ?";
    }
    if (data.query.q){
        values.push(data.query.q);
        conditions += " AND auction.auction_title like '%" + data.query.q + "%' ";
    }
    conditions = conditions.substring(5);
    if (values.length === 0){
        sql = sql + end;
    } else {
        sql = sql + "where " + conditions + end;
    }
    return databaseHelper.queryWithPromise(sql, values)
        .then((result) => applyResultContraints(result, data.query.startIndex, data.query.count))
        .then((result) => {return Promise.resolve(parseDates(result))})
        .catch((reason) => {return Promise.reject(reason)});
};


function applyResultContraints(result, startIndex, count){
    let results = [];
    if (typeof startIndex !== 'undefined'){
        if (startIndex > result.result.length){return Promise.reject({info:globals.BadRequest})}
        else {results = result.result.slice(startIndex, result.result.length)}
    }
    if (typeof count !== 'undefined') {
        if (count >= result.result.length){
            if (results.length === 0){results = result.result}
        }
        else if (results.length === 0) {results = result.result.slice(0,count)}
        else {results = results.slice(0, count)}
    }
    if (results.length === 0){return Promise.resolve({info:globals.OK, result:result.result})}
    return Promise.resolve({info:globals.OK, result:results});
}

function verifyBidAndPlace(bid, amount, auctionId, user, auctionObj){
    let sql = "insert into bid (bid_amount, bid_userid, bid_auctionid, bid_datetime) values (?,?,?,?)";
    if (bid.result[0]) {
        if (bid.result[0].amount < amount && amount > auctionObj.auction_startingprice) {
            return databaseHelper.queryWithPromise(sql, [[amount], [user.user_id], [auctionId], [new Date().toISOString()]]);
        }
    }
    return Promise.reject(globals.BadRequest);
}

function checkAuctionExists(auctionId){
    let sql = "select * from auction where auction_id = ?";
    return databaseHelper.queryWithPromise(sql, [[auctionId]])
        .then((result) => {
            if (result.result[0]){return Promise.resolve(globals.OK)}
            else {return Promise.reject(globals.NotFoundRequest)}})
        .catch((reason) => {return Promise.reject(reason)});
}

function getAuction(auctionId){
    let sql = "select * from auction where auction_id = ?";
    return databaseHelper.queryWithPromise(sql, [[auctionId]])
        .then((result) => {
            if (result.result[0]){return Promise.resolve(result.result[0])}
            else {return Promise.reject(globals.NotFoundRequest)}})
        .catch((reason) => {return Promise.reject(reason)});
}

function getMaxBidForAuction(auctionId){
    let sql = "select MAX(bid_amount) as amount from bid where bid_auctionid = ?";
    return databaseHelper.queryWithPromise(sql, [[auctionId]])
        .then((result) => {return Promise.resolve(result)})
        .catch((reason) => {return Promise.reject(reason)});
}

exports.patchAuction = function(body, auctionId){
    let sql = "update auction set ";
    let condition = "";
    let values = [];
    if (typeof body.categoryId !== 'undefined') {
        values.push(body.categoryId);
        condition += ",auction_categoryid = ?";
    }
    if (typeof body.title !== 'undefined'){
        values.push(body.title);
        condition += ",auction_title = ?";
    }
    if (typeof body.description !== 'undefined'){
        values.push(body.description);
        condition += ",auction_description = ?";
    }
    if (typeof body.startDateTime !== 'undefined'){
        values.push(body.startDateTime);
        condition += ",auction_startingdate = ?";
    }
    if (typeof body.endDateTime){
        values.push(body.endDateTime);
        condition += ",auction_endingdate = ?";
    }
    if (typeof body.reservePrice !== 'undefined'){
        values.push(body.reservePrice);
        condition += ",auction_reservePrice = ?";
    }
    if (typeof body.startingbid !== 'undefined'){
        values.push(body.startingbid);
        condition += ",auction_startingbid = ?";
    }
    condition = condition.substring(1);
    return checkAuctionExists(auctionId)
        .then(() => getAuctionBids(auctionId))
        .then((auction) => {
            if(auction.bids[0]){
                return Promise.reject(globals.Forbidden);
            } else {
                return databaseHelper.queryWithPromise(sql + condition, values)}}, (reason) => Promise.reject(reason))
        .then((result) => {return Promise.resolve({info:globals.OKCreated, data:result})})
        .catch((reason) => {return Promise.reject(reason)});
};

exports.placeBid = function(amount, auction_id, user){
    if (!amount){return Promise.reject(globals.BadRequest)}
    else {
        let auctionObj;
        return getAuction(auction_id)
            .then((auction) => {
                auctionObj = auction;
                return getMaxBidForAuction(auction_id) }, (reason) => {return Promise.reject(reason)})
            .then((bid) => verifyBidAndPlace(bid, amount, auction_id, user, auctionObj))
            .then(() => {return Promise.resolve(globals.OKCreated)})
            .catch((reason) => {return Promise.reject(reason)});
    }
};

exports.createNewAuction = function(body, token){
    return user.findUserByToken(token)
        .then((result) => insertAuction(result.user_id,body),
            (reason) => {return Promise.reject(reason)})
        .then(() => getMaxAuctionId())
        .then((result) => {return Promise.resolve({info: globals.OKCreated, data: result})})
        .catch((reason) => {return Promise.reject(reason)});
};

function insertAuction(user_id, body) {
    let sql = "insert into auction (auction_categoryid, auction_title, auction_description, auction_startingdate," +
        "auction_endingdate, auction_reserveprice, auction_startingprice, auction_userid, auction_creationdate) values (?,?,?,?,?,?,?,?,?)";
    let values = [[body.categoryId], [body.title], [body.description], [new Date(body.startDateTime).toISOString()],
        [new Date(body.endDateTime).toISOString()], [body.reservePrice], [body.startingBid], [user_id], [new Date().toISOString()]];
    return databaseHelper.queryWithPromise(sql, values)
        .then((result) => {return Promise.resolve(result)})
        .catch((reason) => {return Promise.reject(reason)});
}

function getMaxAuctionId() {
    let sql = "select MAX(auction_id) as id from auction";
    return databaseHelper.queryWithPromise(sql)
        .then((result) => {return Promise.resolve(result)});
}

exports.getAuctionById = function (auctionId) {
    let sql = "select auction_categoryid as categoryId, category.category_title as categoryTitle," +
        "auction.auction_title as title, auction.auction_reservePrice as reservePrice, auction.auction_startingdate as startDateTime," +
        "auction.auction_endingdate as endDateTime, auction.auction_description as description, auction_creationdate as creationDateTime," +
        "auction_user.user_id as id, auction_user.user_username as username, auction.auction_startingprice as startingbid, " +
        "ifnull(MAX(bid.bid_amount),0) as currentBid" +
        " from auction JOIN auction_user ON auction.auction_userid =" +
        " auction_user.user_id JOIN category ON auction.auction_categoryid = category.category_id " +
        "LEFT JOIN bid ON bid.bid_auctionid = auction.auction_id where auction.auction_id = ?";
    return databaseHelper.queryWithPromise(sql, [[auctionId]])
        .then((result) => getAuctionBids(auctionId, result), (reason) => Promise.reject(reason))
        .then((result) => getAuctionCurrentBid(auctionId, result))
        .then((result) => getFormattedAuctionJson(result))
        .then((result) => {return Promise.resolve(result)})
        .catch((reason) => {return Promise.reject(reason)});
};

function getAuctionBids(auctionId, auction){
    let sql = "SELECT bid.bid_amount as amount, b" +
        "id.bid_datetime as datetime, bid.bid_userid as buyerId, auction_user.user_username as buyerUsername " +
        "from bid JOIN auction ON auction.auction_id = bid.bid_auctionid " +
        "JOIN auction_user ON bid.bid_userid = auction_user.user_id where auction.auction_id = ?";
    return checkAuctionExists(auctionId)
        .then(() => databaseHelper.queryWithPromise(sql, [[auctionId]]), (reason) => {return Promise.reject(reason)})
        .then((bids) => {return Promise.resolve({auction:auction, info:globals.OK, bids:parseDates(bids).result})})
        .catch((reason) => {return Promise.reject(reason)}); //catch any other error that falls through the FIRST promise
}

function parseDates(object){
    for (let i=0; i<object.result.length; i++){
        if (object.result[i].datetime){object.result[i].datetime = Date.parse(object.result[i].datetime)}
        if (object.result[i].startDateTime){object.result[i].startDateTime = Date.parse(object.result[i].startDateTime)}
        if (object.result[i].endDateTime){object.result[i].endDateTime = Date.parse(object.result[i].endDateTime)}
        if (object.result[i].creationDateTime){object.result[i].creationDateTime = Date.parse(object.result[i].creationDateTime)}
    }
    return object;
}

function getAuctionCurrentBid(auctionId, auctionData) {
    let sql = "select MAX(bid_amount) as currentBid from bid where bid_auctionid = ?";
    return databaseHelper.queryWithPromise(sql, [[auctionId]])
        .then((result) => {
            if (result.result[0]){
                return Promise.resolve({currentBid:result.result[0].currentBid, auctionData:auctionData});
            } else {
                return Promise.resolve({currentBid:0, auctionData:auctionData});
            }
        }).catch((reason) => {return Promise.reject(reason)});
}

function getFormattedAuctionJson(auction) {
    let auctionRes = auction.auctionData.auction.result[0];
    let auctionObj =  {
        categoryId: auctionRes.categoryId,
        categoryTitle: auctionRes.categoryTitle,
        title: auctionRes.title,
        reservePrice: auctionRes.reservePrice,
        startDateTime: Date.parse(auctionRes.startDateTime),
        endDateTime:Date.parse(auctionRes.endDateTime),
        description: auctionRes.description,
        creationDateTime: Date.parse(auctionRes.creationDateTime),
        seller: {
            id:auctionRes.id,
            username: auctionRes.username
        },
        startingbid:auctionRes.startingbid,
        currentBid: auctionRes.currentBid,
        bids:auction.auctionData.bids
    };
    return {auctionObj:auctionObj, info:auction.auctionData.auction.info}
}

exports.getAuctionBids = getAuctionBids;

exports.checkAuctionExists = checkAuctionExists;